Getting Started - About Version Control

Version control is a system that records changes to a file or set of files over time 

so that you can recall specific versions later. 
Using a VCS also generally means that if you screw things up or lose files, you can easily recover. 
In addition, you get all this for very little overhead.

Many people’s version-control method of choice is to copy files into another directory. 
This approach is very common because it is so simple, but it is also incredibly error prone. 
It is easy to forget which directory you’re in and accidentally write to the wrong file
or copy over files you don’t mean to.
To deal with this issue, programmers long ago developed local VCSs that had
a simple database that kept all the changes to files under revision control.

The next major issue that people encounter is that they need to collaborate with developers on other systems. 
To deal with this problem, Centralized Version Control Systems (CVCSs) were developed.
These systems, such as CVS, Subversion, and Perforce, have a single server that 
contains all the versioned files, and a number of clients that check out files from that central place.
However, this setup also has some serious downsides. 
The most obvious is the single point of failure that the centralized server represents.
If that server goes down for an hour, then during that hour nobody can collaborate at all
or save versioned changes to anything they’re working on. If the hard disk the central database 
is on becomes corrupted, and proper backups haven’t been kept, you lose absolutely everything

This is where Distributed Version Control Systems (DVCSs) step in. In a DVCS 
(such as Git, Mercurial, Bazaar or Darcs), clients don’t just check out the latest snapshot of the files;
rather, they fully mirror the repository, including its full history. Thus, if any server dies, 
and these systems were collaborating via that server, any of the client repositories can be copied 
back up to the server to restore it. Every clone is really a full backup of all the data.
